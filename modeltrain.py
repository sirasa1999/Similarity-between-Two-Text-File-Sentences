# -*- coding: utf-8 -*-
"""ModelTrain of minorprojectS3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16SsB6NOyodBrGeM6MPGEybi1vE-Nd4zQ
"""

from time import time
import pandas as pd
import numpy as np
from gensim.models import KeyedVectors as KVecs
import re  # regex for string machting
import nltk
from nltk.corpus import stopwords
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt # use instead of seaborn
# import seaborn as sb

from sklearn.datasets import make_classification
from sklearn.metrics import plot_confusion_matrix, confusion_matrix
from sklearn.svm import SVC

# import logging
#import absl.logging

import itertools
import datetime

import keras as bananas

from keras.preprocessing.sequence import pad_sequences
from keras.models import Model
from keras.layers import Input, Embedding, LSTM, Lambda
import keras.backend as K
from keras.optimizers import Adadelta  # use instead of Adam
from keras.callbacks import ModelCheckpoint

from google.colab import drive
drive.mount('/content/drive')

# pd.__version__
# # console.log
# print(bananas.__version__)

# File paths <change for google drive>
TRAIN_CSV = '/content/drive/MyDrive/minor project/dataset_train.csv'
#TEST_CSV = '/content/drive/MyDrive/minor project/dataset_test.csv'
EMBEDDING_FILE = '/content/drive/MyDrive/minor project/GoogleNews-vectors-negative300.bin'
MODEL_SAVING_DIR = '/content/drive/MyDrive/Quora'
nltk.download('stopwords')
#!pip install pandas==0.9
#File structure: one empty folder named Quora. Download kaggle datasets for Quora ques pairs 
# ani google for GoogleNews neg300 ko vectors. 1.5 gigs ko file huncha. `.bin.gz` format

# Load training and test set
train_df = pd.read_csv(TRAIN_CSV)
#test_df = pd.read_csv(TEST_CSV)

# nltk doesn't download its stopwords library by default
try:
  stops = set(stopwords.words('english'))
except:
  nltk.download('stopwords')
  time.sleep(3)
  stops = set(stopwords.words('english'))



def text_to_word_list(text):
    ''' Pre process and convert texts to a list of words '''
    text = str(text)  
    text = text.lower()

    # Clean text with regex subs
    text = re.sub(r"[^A-Za-z0-9^,!.\/'+-=]", " ", text)
    # text = re.sub(r"what's", "what is ", text)
    text = re.sub(r"\'s", " ", text)
    text = re.sub(r"\'ve", " have ", text)
    text = re.sub(r"can't", "cannot ", text)
    text = re.sub(r"n't", " not ", text)
    text = re.sub(r"i'm", "i am ", text)
    text = re.sub(r"\'re", " are ", text)
    text = re.sub(r"\'d", " would ", text)
    text = re.sub(r"\'ll", " will ", text)
    text = re.sub(r",", " ", text)
    text = re.sub(r"\.", " ", text)
    text = re.sub(r"!", " ! ", text)
    text = re.sub(r"\/", " ", text)
    text = re.sub(r"\^", " ^ ", text)
    text = re.sub(r"\+", " + ", text)
    text = re.sub(r"\-", " - ", text)
    text = re.sub(r"\=", " = ", text)
    text = re.sub(r"'", " ", text)
    text = re.sub(r"(\d+)(k)", r"\g<1>000", text)
    text = re.sub(r":", " : ", text)
    text = re.sub(r" e g ", " eg ", text)
    text = re.sub(r" b g ", " bg ", text)
    text = re.sub(r" u s ", " american ", text)
    text = re.sub(r"\0s", "0", text)
    text = re.sub(r" 9 11 ", "911", text)
    text = re.sub(r"e - mail", "email", text)
    text = re.sub(r"j k", "jk", text)
    text = re.sub(r"\s{2,}", " ", text)

    text = text.split()

    return text

#Prepare embedding
vocabulary = dict()
inverse_vocabulary = ['<unk>']  # placeholder for [0, 0, ....0] embedding
word2vec = KVecs.load_word2vec_format(EMBEDDING_FILE, binary=True)  # word2vec yah cha

sentence_cols = ['sentence1', 'sentence2']
length = len(sentence_cols)

# Iterate over the sentences only of both training and test datasets
for dataset in [train_df]:
    for index, row in dataset.iterrows():

        # Iterate through the text of both sentences of the row
        for sentence in sentence_cols:

            s2n = []  # s2n -> sentence numbers representation
            for word in text_to_word_list(row[sentence]):

                # Check for unwanted words
                if word in stops and word not in word2vec.vocab:
                    continue  

                if word not in vocabulary:
                    # inserts unique words into empty `vocabulary` dictionary
                    vocabulary[word] = len(inverse_vocabulary)
                    s2n.append(len(inverse_vocabulary))  # numerizing words
                    inverse_vocabulary.append(word)
                else:
                    s2n.append(vocabulary[word])

            # Replace questions as word to question as number representation
            dataset.at[index, sentence] = s2n
            
embedding_dim = 300
embeddings = 1 * np.random.randn(len(vocabulary) + 1, embedding_dim)  # This will be the embedding matrix
embeddings[0] = 0  # So that the padding will be ignored

# Build the embedding matrix
for word, index in vocabulary.items():
    if word in word2vec.vocab:
        embeddings[index] = word2vec.word_vec(word)

del word2vec

max_seq_length = max(train_df.sentence1.map(lambda x: len(x)).max(),
                     train_df.sentence2.map(lambda x: len(x)).max())

# Split to train validation


validation_size = 600
training_size = len(train_df) - validation_size

X = train_df[sentence_cols]
Y = train_df['is_duplicate']

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=validation_size)

# Split to dicts
X_train = {'left': X_train.sentence1, 'right': X_train.sentence2}
X_test = {'left': X_test.sentence1, 'right': X_test.sentence2}
#X_test = {'left': test_df.sentence1, 'right': test_df.sentence2}

# Convert labels to their numpy representations
Y_train = Y_train.values
Y_test = Y_test.values
# print('---------')
# print(Y_train)
# print(type(Y_train))
# print(Y_validation)
# print(type(Y_validation))

# Zero padding
for dataset, side in itertools.product([X_train, X_test], ['left', 'right']):
    dataset[side] = pad_sequences(dataset[side], maxlen=max_seq_length)

# Make sure everything is ok
assert X_train['left'].shape == X_train['right'].shape
assert len(X_train['left']) == len(Y_train)

# Model variables
n_hidden = 16
gradient_clipping_norm = 0.2
batch_size = 64
n_epoch = 1000

def exponent_neg_manhattan_distance(left, right):
    ''' Helper function for the similarity estimate of the LSTMs outputs'''
    return K.exp(-K.sum(K.abs(left-right), axis=1, keepdims=True))

# The visible layer
left_input = Input(shape=(max_seq_length,), dtype='int32')
right_input = Input(shape=(max_seq_length,), dtype='int32')

embedding_layer = Embedding(len(embeddings), embedding_dim, weights=[embeddings], input_length=max_seq_length, trainable=False)

# Embedded version of the inputs
encoded_left = embedding_layer(left_input)
encoded_right = embedding_layer(right_input)
# encoded_left = left_input  # skip embed and encode entirely
# encoded_right = right_input

# Since this is a siamese network, both sides share the same LSTM
shared_lstm = LSTM(n_hidden)

left_output = shared_lstm(encoded_left)
right_output = shared_lstm(encoded_right)

# Calculates the distance as defined by the MaLSTM model
malstm_distance = Lambda(function=lambda x: exponent_neg_manhattan_distance(x[0], x[1]),output_shape=lambda x: (x[0][0], 1))([left_output, right_output])

# Pack it all up into a model
malstm = Model([left_input, right_input], [malstm_distance])

# Adadelta optimizer, with gradient clipping by norm
optimizer = Adadelta(clipnorm=gradient_clipping_norm)

# 2ta popular optimizers: Adam, Adadelta

malstm.compile(loss='mean_squared_error', optimizer=optimizer, metrics=['accuracy'])

# Start training
training_start_time = time()

malstm_trained = malstm.fit([X_train['left'], X_train['right']], Y_train, batch_size=batch_size, epochs=n_epoch,
                            validation_data=([X_test['left'], X_test['right']], Y_test))



print("Training time finished.\n{} epochs in {}".format(n_epoch, datetime.timedelta(seconds=time()-training_start_time)))

# Plot accuracy
plt.plot(malstm_trained.history['accuracy'])
plt.plot(malstm_trained.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper right')
plt.yticks(np.arange(0.65, 0.9, 0.1))
plt.show()

# Plot loss over epochs
plt.plot(malstm_trained.history['loss'])
plt.plot(malstm_trained.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper right')
plt.yticks(np.arange(0.1, 0.4, 0.05))
plt.show()



clf = SVC(random_state=0)
clf.fit(X_train['right'], Y_train)
SVC(random_state=0)
plot_confusion_matrix(clf, X_test['right'], Y_test)  
predictions = clf.predict(X_test['right'])
cm = confusion_matrix(Y_test, predictions)
# print(cm[0][0])
# print(cm[0][1])
# print(cm[1][0])
# print(cm[1][1])
tn = cm[0][0]
fp = cm[0][1]
tp = cm[1][0]
fn = cm[1][1]
accuracy = (tp+tn)/(tp+fp+tn+fn)
precision = tp/(tp+fp)
recall = tp/(tp+fn)
f1_score = (2*precision*recall)/(precision+recall)
print('Accuracy: ', accuracy)
print('Precision: ', precision)
print('Recall: ', recall)
print('F1_score: ', f1_score)
print('\n')
print('\n')
plt.show()